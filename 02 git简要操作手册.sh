-------------------------------------------------------------------------------
【基本操作】：获取源码，提交改动，推送到服务器
【情景操作】：历史查看、源码冲突、源码回滚
-------------------------------------------------------------------------------
【GIT小贴士】
Branch(分支)：每一个分支就是一个特定的工作区，每个人在本地都应该有自己的工作区，取到主干代码后第一件事为自己建立一个本地分支。
每次都从主分支合并到本地分支来获取最新版本的源码。
Commit(提交)：提交本地改动，可以理解为快照，只要做过快照都可以找回。
Merge(合并)：保证自己解决完冲突再去做改动，不然Git将会改变文件结构

#【进入命令行】 安装好Git-1.9.5-preview20150319.exe后，【资源管理】【右击鼠标】【git bash】

#【下载服务器上代码】
#注意：omni标识映射到当前目录下的目录名称，可以与服务器上不一致
#这里下载的是默认分支master的源码
#clone在工作目录（omni）下会有一个.git的隐藏目录git本地的一切配置、源码历史、分支都在这里
git clone http://tfs.e-future.com.cn:9800/tfs/T2015/RD.201502.ZT/_git/yzt omni

#【列举新增的改动】
git status

#【加入改动】
git add .

#【删除】 ？？ 表示文件名或通配符
git rm filename

#【首次配置】
git config --global user.email "yourmail@e-future.com.cn"
git config --global user.name "yourname"

#【提交改动】 
git commit -m "some message"

#【推送到远程服务器】
git push

#【获取服务器上最新】
#如果本地与服务器之间没有冲突则本地同步到最新，如果有冲突则需要先提交本地的变更，然后协调冲突才能pull
git pull

#查看修改记录
git log


#回退到某个ID对应的版本
#如果忽略了
git reset sha1/filename 
git checkout sha1/filename



-------------------------------------------------------------------------------
【工具与配置】：下载地址，关键配置
-------------------------------------------------------------------------------
#【Git-1.9.5-preview20150319.exe】   官方的git工具，提供命令行和GUI两种操作模式
#    https://github.com/msysgit/msysgit/releases/download/Git-1.9.5-preview20150319/Git-1.9.5-preview20150319.exe

#【TortoiseGit】   与资管管理器集成的图示化工具，它的运行需要上面工具，不同的操作系统请对应选择
#    http://download.tortoisegit.org/tgit/previews/TortoiseGit-preview-1.8.13.1-20150329-d90bc60-64bit.msi
#    http://download.tortoisegit.org/tgit/previews/TortoiseGit-preview-1.8.13.1-20150329-d90bc60-32bit.msi

#【存储密码】  在.git目录中编辑config文件追加如下节点注意两行
[credential]   
    helper = store

#【集成Beyond Compare】 注意bocmp文件路径需要根据本机调整，同时注意路径为“/”
[diff]
tool = bc4
[difftool]
prompt = false
[difftool "bc4"]
cmd = "\"F:/MyApp/Beyond Compare/bcomp.exe\" \"$LOCAL\" \"$REMOTE\""
[merge]
tool = bc4
[mergetool]
prompt = false
[mergetool "bc4"]
cmd = "\"F:/MyApp/Beyond Compare/bcomp.exe\" \"$LOCAL\" \"$REMOTE\" \"$BASE\" \"$MERGED\""


-------------------------------------------------------------------------------
【分支相关】
-------------------------------------------------------------------------------
【查看所有分支】
git branch -a

【获取分支到本地】
git checkout -b hsdemo origin/hsdemo

【删除本地分支】 删除本地名为hsdemo的分支
git branch -d hsdemo

【合并分支】
1.提交当前分支改动
2.git checkout 切换到你要保留的分支
3.git merge branchname
4.解决冲突
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
【查看历史】
-------------------------------------------------------------------------------
历史的排序是由提交时间排序，所以刚刚推送的部分提交可能并不能在最前。




-------------------------------------------------------------------------------
【案例情景01】本地修改后，但只想提交部分文件或某个目录
-------------------------------------------------------------------------------
1.提交需要提交的改动
git add dir/filename
git commit -m "member"
2.暂存本地其他不想提交的改动，以便获取最新后快速恢复到本次工作状态
git stash
3.获取最新版本(推送操作可选)
git pull
4.一些正常改动后
5.回到原先的工作状态
git stash pop
?会有冲突?

-------------------------------------------------------------------------------
【案例情景02】查看所有历史记录
-------------------------------------------------------------------------------
历史的排序是由提交时间排序，所以刚刚推送的部分提交可能并不能在最前。


-------------------------------------------------------------------------------
【案例情景03】回退到某个历史版本
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
【案例情景04】为什么在推送前要多次提交
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
【案例情景05】为什么不能PULL(拉取)
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
【案例情景06】如何以远端为准
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
【案例情景07】如何以本地为准(拉取)
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
【案例情景08】如何自动合并
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
【案例情景09】如何手动合并
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
【案例情景10】自动合并错误后如何手动解决
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
【案例情景11】回滚之后无法同步
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
【案例情景11】小乌龟自动签名不能commit
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
【案例情景12】误加入版本控制文件的删除
-------------------------------------------------------------------------------


-------------------------------------------------------------------------------
【回滚】
-------------------------------------------------------------------------------
git reset sha1 --hard 斩断式回滚
git revert sha1 再次提交改动达到回滚

reset 与 revert 区别
reset是直接回到版本 revert是回到版本后与最新版比较差异等待合并

git reset git将当前工作区强行回滚到目标提交
git push -f (结果严重) 将远程最新版本设为本地，将丢失一部分改动

git revert 合并完成后即是最新版，正常推送和拉取就好

-------------------------------------------------------------------------------
【参考教程】
-------------------------------------------------------------------------------
【15分钟】在线git教程
https://try.github.io/levels/1/challenges/1

【简易指南】
http://www.bootcss.com/p/git-guide/

【官网教程】
http://git-scm.com/book/zh/v1

【csdn中文教程】
http://blog.csdn.net/witsmakemen/article/details/19240855


好麻烦部落 git 教程
http://blog.gogojigmmy.net/2012/01/17/how-to-use-git-1-git-basic/
英文教程
http://marklodato.github.io/visual-git-guide/index-en.html
http://marklodato.github.io/visual-git-guide/index-zh-cn.html

------------------------------------------------------------------------------------------------------------------------------------

http://wlog.cn/soft/git-quick-start.html

INDEXTAGSPROJECTSABOUTLINKSFEED



#回滚到指定版本id为git log看到的id
git reset <id>

#比较本地文件和暂存区的差异
git difftool a.txt


